#! /bin/sh
#
# $Id$
# 
# xAutoClick
#
# Copyright (C) 2006 Ivo van Poorten
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

#
# Alternate configure
# Loosely based on MPlayer's configure
#

TMPC="configure-test-file.c"
TMPCXX="configure-test-file.cpp"
TMPO="configure-test-file.o"
TMPLOG="configure.log"

_debug=
_cc=gcc
_ccfordeps="$_cc -MM"
_cxx=g++
_cxxfordeps="$_cxx -MM"
_ldd=ldd
_prefix=/usr/local
_cflags=
_optimize="-O4"
_warnings=
_ldflags=-lm
_inc_extra=
_ld_extra=
_make=
_makedepend=makedepend
_inttypes=
_stdint=
_unistd=
_malloc=

_inc_x11=
_ld_x11=

_ascii=no

_gtk1=no
_gtk_config=
_inc_gtk1=
_ld_gtk1=
_inc_glib=
_ld_glib=

_qt3=no
_inc_qt3=
_ld_qt3=

_gtk2=no
_pkg_config=
_inc_gtk2=
_ld_gtk2=
_inc_glib2=
_ld_glib2=

_commandline=no

# check environment

if test "$CC" != "" ; then
    _cc=$CC
    _ccfordeps="$_cc -MM"
fi
if test "$CXX" != "" ; then
    _cxx=$CXX
    _cxxfordeps="$_cxx -MM"
fi
if test "$CFLAGS" != "" ; then
    echo "Warning: Overriding CFLAGS with environment variable ($CFLAGS)"
    echo "If that's not what you want, run CFLAGS= ./configure"
    _cflags=$CFLAGS
    echo
fi

# Functions

case `echo -n` in
    -n)     _echo_n=        _echo_c='\c'    ;; # SysV echo
    *)      _echo_n='-n '   _echo_c=        ;; # BSD echo
esac

echocheck() {
    echo "============ Checking for $@ ============" >> "$TMPLOG"
    echo ${_echo_n} "Checking for $@ ... ${_echo_c}"
}

echores() {
    echo "Result is: $@" >> "$TMPLOG"
    echo "##########################################" >> "$TMPLOG"
    echo "" >> "$TMPLOG"
    echo "$@"
}

cc_check() {
    echo "" >> "$TMPLOG"
    cat "$TMPC" >> "$TMPLOG"
    echo "" >> "$TMPLOG"
    echo "$_cc $CFLAGS $_inc_extra $_ld_extra $TMPC -o $TMPO $@" >> "$TMPLOG"
    rm -f "$TMPO"
    ( $_cc $CFLAGS $_inc_extra $_ld_extra "$TMPC" -o "$TMPO" "$@" ) >> "$TMPLOG" 2>&1
    TMP="$?"
    echo >> "$TMPLOG"
    echo "ldd $TMPO" >> "$TMPLOG"
    ( $_ldd "$TMPO" ) >> "$TMPLOG" 2>&1
    echo >> "$TMPLOG"
    return "$TMP"
}

cxx_check() {
    echo "" >> "$TMPLOG"
    cat "$TMPCXX" >> "$TMPLOG"
    echo "" >> "$TMPLOG"
    echo "$_cxx $CFLAGS $_inc_extra $_ld_extra $TMPCXX -o $TMPO $@" >> "$TMPLOG"
    rm -f "$TMPO"
    ( $_cxx $CFLAGS $_inc_extra $_ld_extra "$TMPCXX" -o "$TMPO" "$@" ) >> "$TMPLOG" 2>&1
    TMP="$?"
    echo >> "$TMPLOG"
    echo "ldd $TMPO" >> "$TMPLOG"
    ( $_ldd "$TMPO" ) >> "$TMPLOG" 2>&1
    echo >> "$TMPLOG"
    return "$TMP"
}

die () {
    echo
    echo "Error: $@" >&2
    echo >&2
    rm -f "$TMPO" "$TMPC"
    echo "Check \"$TMPLOG\" if you do not understand why it failed."
    echo
    exit 1
}

# Parse commandline

for parm in "$@"; do
    if test "$parm" = "--help" || test "$parm" = "-help" || test "$parm" = "-h" ; then
        cat << EOF

Usage $0 [options] ...

Configuration:
  -h, --help                display this help and exit

Installation directories:
  --prefix=DIR              use this prefix for installation [/usr/local]

Miscellaneous options:
  --cc=COMPILER             use this C compiler to build [$_cc]
  --cxx=COMPILER            use this C++ compiler to build [$_cxx]
  --with-extraincdir=DIR    extra headers
  --with-extralibdir=DIR    extra library files

Advanced options:
  --enable-debug            enable debug symbols [disabled]
  --enable-warnings         enable all compiler warnings [disabled]

  --with-make=              use a custom make program
  --with-makedepend=        use a custom makedepend program (if needed)

EOF
        exit 0
    fi
done

for ac_option do
    case "$ac_option" in
    --prefix=*)
        _prefix=`echo $ac_option | cut -d '=' -f 2`
        ;;
    --cc=*)
        _cc=`echo $ac_option | cut -d '=' -f 2`
        ;;
    --cxx=*)
        _cxx=`echo $ac_option | cut -d '=' -f 2`
        ;;
    --with-extraincdir=*)
        _inc_extra=-I`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -I,g'`
        ;;
    --with-extralibdir=*)
        _ld_extra=-L`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -L,g'`
        ;;
    --disable-debug)
        _debug=""
        ;;
    --enable-debug)
        _debug="-g -DDEBUG"
        _optimize=""
        ;;
    --disable-warnings)
        _warnings=""
        ;;
    --enable-warnings)
        _warnings="-Wall"
        ;;
    --with-make=*)
        _make=`echo $ac_option | cut -d '=' -f 2`
        ;;
    --with-makedepend=*)
        _makedepend=`echo $ac_option | cut -d '=' -f 2`
        ;;
    *)
        echo "unknown option: $ac_option"
        exit 1
        ;;
    esac
done

# remove previous files _after_ the commandline is parsed

rm -f config.mak
rm -f $TMPLOG

# Do tests...

echocheck "c compiler"
if test -z "$_cc" ; then
    die "no compiler specified"
fi
cc_run=`( $_cc ) 2>&1`
if test "$?" -gt 1; then
    echores "no"
    die "can't find compiler"
fi
echores "$_cc"



echocheck "c++ compiler"
if test -z "$_cxx" ; then
    echores "no c++ compiler specified"
    echocheck "$_cc as c++ compiler"
    _cxx="$_cc"
fi
cxx_run=`( $_cxx ) 2>&1`
if test "$?" -gt 1; then
    if test "$_cxx" = "$_cc" ; then
        echores "no"
        die "can't find compiler"
    else
        echo "can't find $_cxx"
        echocheck "$_cc as c++ compiler"
        _cxx="$_cc"
    fi
fi
cat > $TMPCXX << EOF
#include <iostream>
int main(int argc, char **argv) { return 0; }
EOF
_tmp="no"
cxx_check && _tmp="yes"
if test "$_tmp" = "yes" ; then
    echores "$_cxx"
else
    _cxx=""
    echores "no, disabling compilation of all c++ code"
fi



# Suppress stupid ICC remarks

if test "`basename $_cc`" = "icc"; then
    if test "$_warnings" != ""; then
        _warnings="$_warnings -wd1418,810,869,279"
    fi
    if test "$_optimize" != ""; then
        _optimize="-O"
    fi
fi



echocheck "GNU Make"
if test "$_make" = "" ; then
    for _maket in make gmake nogmakepresent; do
        _tmp=`$_maket --version 2>>"$TMPLOG" | head -n 1 | cut -d ' ' -f 1`
        if test "$?" -eq 0 ; then
            if test "$_tmp" = "GNU" ; then
                echores "yes, using $_maket"
                break;
            fi
        fi
    done
    _make=$_maket
    if test "$_make" = "nogmakepresent" ; then
        echores "no"
        die "You need GNU Make to build. If you are sure your version of make
is compatible, you may want to specify --with-make= on the command line"
    fi
else
    echores "using $_make (command line override)"
fi



echocheck "extra headers"
if test "$_inc_extra" ; then
    echores "$_inc_extra"
else
    echores "no"
fi



echocheck "extra libraries"
if test "$_ld_extra" ; then
    echores "$_ld_extra"
else
    echores "no"
fi



echocheck "$_cc support of -MM option"
cat > $TMPC << EOF
int main(void) { return 0; }
EOF
$_cc -MM $TMPC >> $TMPLOG 2>&1
if test "$?" -gt 0; then
    echores "no"
    _ccfordeps=""
else
    echores "yes"
    _ccfordeps="$_cc -MM"
fi



if test "$_cxx" != "" ; then
echocheck "$_cxx support of -MM option"
cat > $TMPCXX << EOF
int main(void) { return 0; }
EOF
$_cxx -MM $TMPC >> $TMPLOG 2>&1
if test "$?" -gt 0; then
    echores "no"
    _cxxfordeps=""
else
    echores "yes"
    _cxxfordeps="$_cxx -MM"
fi
fi



if test "$_ccfordeps" = "" || test "$_cxxfordeps" = "" ; then
    echocheck "makedepend"
    cat > $TMPC << EOF
int main(void) { return 0; }
EOF
    $_makedepend -f- $TMPC >> $TMPLOG 2>&1
    if test "$?" -gt 0; then
        echores "no"
        die "If your compiler doensn't understand -MM, makedepend is needed."
    else
        echores "yes, $_makedepend"
        if test "$_ccfordeps" = "" ; then
            _ccfordeps="$_makedepend -f-"
        fi
        if test "$_cxxfordeps" = "" ; then
            _cxxfordeps="$_makedepend -f-"
        fi
    fi
fi



echocheck "inttypes.h"
cat > $TMPC << EOF
#include <inttypes.h>
int main(void) { return 0; }
EOF
cc_check && _inttypes=yes
if test "$_inttypes" = yes ; then
    echores "yes"
    _inttypes="-DHAVE_INTTYPES_H"
else
    echores "no"
    _inttypes=""
    echocheck "stdint.h"
    cat > $TMPC << EOF
#include <stdint.h>
int main(void) { return 0; }
EOF
    cc_check && _stdint=yes
    if test "$_stdint" = yes ; then
        echores "yes"
        _stdint="-DHAVE_STDINT_H"
    else
        echores "no"
        _stdint=""
    fi
fi



echocheck "unistd.h"
cat > $TMPC << EOF
#include <unistd.h>
int main(void) { return 0; }
EOF
cc_check && _unistd=yes
if test "$_unistd" = yes ; then
    echores "yes"
    _unistd="-DHAVE_UNISTD_H"
else
    echores "no"
    _unistd=""
fi



echocheck "malloc.h"
cat > $TMPC << EOF
#include <malloc.h>
int main(void) { (void) malloc(0); return 0; }
EOF
cc_check && _malloc=yes
if test "$_malloc" = yes ; then
    echores "yes"
    _malloc="-DHAVE_MALLOC_H"
else
    echores "no"
    _malloc=""
fi



echocheck "X11 header presence"
if test -z "$_inc_x11" ; then
    for i in /usr/X11/include /usr/X11R6/include /usr/include/X11R6 /usr/include /usr/openwin/include ; do
        if test -d "$i/X11" && test -f "$i/X11/Xlib.h" ; then
            _inc_x11="-I$i"
            echores "yes (using $i)"
            break;
        fi
    done
    if test -z "$_inc_x11" ; then
        echores "not found (check if the dev(el) packages are installed"
    fi
else
    echores "yes (using $_inc_x11)"
fi
if test "$_inc_x11" = "-I/usr/include" ; then
    _inc_x11=
fi



echocheck "X11"
_x11=no
cat > $TMPC << EOF
#include <X11/Xlib.h>
int main(void) { (void) XCreateWindow(0,0,0,0,0,0,0,0,0,0,0,0); return 0; }
EOF
for i in /usr/X11R6/lib /usr/lib/X11R6 /usr/X11/lib /usr/lib32 /usr/openwin/lib /usr/X11R6/lib64 /usr/lib ; do
    _ld_x11="-L$i -lX11 -lXext"
    if test -d "$i" && cc_check $_inc_x11 $_ld_x11 ; then
        _x11=yes
        break
    fi
done
if test "$_x11" = "yes" ; then
    echores "$_x11 (using $_ld_x11)"
else
    echores "$_x11"
fi



echocheck "XTest extension"
_xtest=no
_ld_x11="$_ld_x11 -lXtst"
cat > $TMPC << EOF
#include <X11/Xlib.h>
#include <X11/extensions/XTest.h>
int main(void) { Display *display = XOpenDisplay(NULL); }
EOF
cc_check $_inc_x11 $_ld_x11 && _xtest=yes
echores "$_xtest"


######################
# BIG if X11 block !!!
######################

if test "$_x11" = "yes" ; then
if test "$_xtest" = "yes" ; then

# ascii version only needs X11/Xtest
_ascii=yes
# same for command line version
_commandline=yes

# GTK1
echocheck "gtk-config"
if test -z "$_gtk_config" ; then
    if ( gtk-config --version ) >/dev/null 2>&1 ; then
        _gtk_config="gtk-config"
    elif ( gtk12-config --version ) >/dev/null 2>&1 ; then
        _gtk_config="gtk12-config"
    else
        _gtk_config="no"
    fi
fi
echores "$_gtk_config"



if test "$_gtk_config" != "no" ; then
    echocheck "GTK cflags"
    _inc_gtk1=`$_gtk_config --cflags 2>&1`
    echores "$_inc_gtk1"
    echocheck "GTK libs"
    _ld_gtk1=`$_gtk_config --libs 2>&1`
    echores "$_ld_gtk1"

    echocheck "glib-config"
    if test -z "$_glib_config" ; then
        if ( glib-config --version ) >/dev/null 2>&1 ; then
            _glib_config="glib-config"
        elif ( glib12-config --version ) >/dev/null 2>&1 ; then
            _glib_config="glib12-config"
        else
            _glib_config="no"
        fi
    fi
    echores "$_glib_config"

    if test "$_glib_config" != "no" ; then
        echocheck "glib cflags"
        _inc_glib=`$_glib_config --cflags 2>&1`
        echores "$_inc_glib"
        echocheck "glib libs"
        _ld_glib=`$_glib_config --libs 2>&1`
        echores "$_ld_glib"

        _gtk1=yes

    else
        _inc_gtk1=
        _ld_gtk1=
        echores "Not building gAutoClick"
    fi

else
    echores "Not building gAutoClick"
fi



echocheck "pkg-config"
if test -z "$_pkg_config" ; then
    if ( pkg-config --version ) >/dev/null 2>&1 ; then
        _pkg_config="pkg-config"
    else
        _pkg_config="no"
    fi
fi
echores "$_pkg_config"



if test "$_pkg_config" != "no" ; then

    echocheck "GTK+ 2.0"
    
    if $_pkg_config gtk+-2.0 --exists 1>/dev/null 2>>$TMPLOG ; then
        echores "yes"
        echocheck "GTK+ 2.0 cflags"
        _inc_gtk2=`$_pkg_config gtk+-2.0 --cflags 2>>$TMPLOG`
        echores "$_inc_gtk2"
        echocheck "GTK+ 2.0 libs"
        _ld_gtk2=`$_pkg_config gtk+-2.0 --libs 2>>$TMPLOG`
        echores "$_ld_gtk2"

        echocheck "glib 2.0 cflags"
        _inc_glib2=`$_pkg_config glib-2.0 --cflags 2>>$TMPLOG`
        echores "$_inc_glib2"
        echocheck "glib 2.0 libs"
        _ld_glib2=`$_pkg_config glib-2.0 --libs 2>>$TMPLOG`
        echores "$_ld_glib2"

        _gtk2=yes
    else
        $_pkg_config gtk+-2.0 --cflags >> $TMPLOG 2>&1
        echores "no"
    fi

    echocheck "Qt 3"

    if $_pkg_config qt-mt --exists 1>/dev/null 2>>$TMPLOG ; then
        echores "yes"
        echocheck "Qt 3 cflags"
        _inc_qt3=`$_pkg_config qt-mt --cflags 2>>$TMPLOG`
        echores "$_inc_qt3"
        echocheck "Qt 3 libs"
        _ld_qt3=`$_pkg_config qt-mt --libs 2>>$TMPLOG`
        echores "$_ld_qt3"

        _qt3=yes
    else
        $_pkg_config qt-mt --cflags >> $TMPLOG 2>&1
        echores "no"
    fi

    echocheck "Qt 4"

    if $_pkg_config QtCore QtGui --exists 1>/dev/null 2>>$TMPLOG ; then
        echores "yes"
        echocheck "Qt 4 cflags"
        _inc_qt4=`$_pkg_config QtCore QtGui --cflags 2>>$TMPLOG`
        echores "$_inc_qt4"
        echocheck "Qt 4 libs"
        _ld_qt4=`$_pkg_config QtCore QtGui --libs 2>>$TMPLOG`
        echores "$_ld_qt4"

        _qt4=yes
    else
        $_pkg_config QtCore QtGui --cflags >> $TMPLOG 2>&1
        echores "no"
    fi
else
    echores "Not building gAutoClick2"
    echores "Not building qtAutoClick"
    echores "Not building qt4AutoClick"
fi



else
    echo "X11 found, but it does not seem to have the XTest extension"
    echo "No X11 dependant applications will be build"
fi

else
    echo "No X11 found. Not building anything that depends on it"
fi

#####################
# END of BIG if BLOCK
#####################



# Write report

echo
if test "$_debug" = ""; then
    echo "Debug symbols disabled."
else
    echo "Debug symbols enabled."
fi
if test "$_warnings" = ""; then
    echo "All compiler warnings disabled."
else
    echo "All compiler warnings enabled."
fi


# Cleaning up source tree

echo
echo ${_echo_n} "Cleaning up source tree ... ${_echo_c}"
> config.mak
$_make clean >> $TMPLOG 2>&1
echores "done"


# Assemble _cflags and _ldflags

_cflags="$_cflags"
_ldflags="$_ldflags $_ld_extra"

# Generate config.mak

echo
echo ${_echo_n} "Generating config.mak ... ${_echo_c}"
cat > config.mak << EOF
CC=$_cc
CXX=$_cxx
CFLAGS=$_cflags $_optimize $_inttypes $_stdint $_malloc $_unistd
INCLUDES=$_inc_extra
INCLUDES_ASCII=$_inc_x11
INCLUDES_COMMANDLINE=$_inc_x11
INCLUDES_GTK1=$_inc_gtk1 $_inc_glib $_inc_x11
INCLUDES_GTK2=$_inc_gtk2 $_inc_glib $_inc_x11
INCLUDES_QT3=$_inc_qt3 $_inc_x11
INCLUDES_QT4=$_inc_qt4 $_inc_x11
CCFORDEPS=$_ccfordeps
CXXFORDEPS=$_cxxfordeps
LD=$_cc
LDFLAGS=$_ldflags
LDFLAGS_ASCII=$_ld_x11
LDFLAGS_COMMANDLINE=$_ld_x11
LDFLAGS_GTK1=$_ld_gtk1 $_ld_glib $_ld_x11
LDFLAGS_GTK2=$_ld_gtk2 $_ld_glib $_ld_x11
LDFLAGS_QT3=$_ld_qt3 $_ld_x11
LDFLAGS_QT4=$_ld_qt4 $_ld_x11
DEBUG=$_debug
WARNINGS=$_warnings
MAKE=$_make
PREFIX=$_prefix

HAVE_ASCII=$_ascii
HAVE_GTK1=$_gtk1
HAVE_GTK2=$_gtk2
HAVE_QT3=$_qt3
HAVE_QT4=$_qt4
HAVE_COMMANDLINE=$_commandline
EOF

# Clean up

rm -f "$TMPC" "$TMPCXX" "$TMPO"

cat << EOF
done.

aAutoClick    : $_ascii
cAutoClick    : $_commandline
gAutoClick    : $_gtk1
gAutoClick2   : $_gtk2
qtAutoClick   : $_qt3
qt4AutoClick  : $_qt4

Installation to $_prefix

EOF

if test "$_ascii$_commandline$_gtk1$_gtk2$_qt3$_qt4" = "nononononono" ; then
    cat << EOF
None of the xautoclick applications can be build. You need to install the
development packages of X11, GTK+ and/or QT. Check the documentation of
your distribution for details.

EOF
    exit 1
fi

echo "Now type '$_make' to build."
echo
